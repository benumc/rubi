<?xml version="1.0" encoding="UTF-8"?>
<component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="racepoint_component_profile.xsd" manufacturer="Hass" model="WS-rubi" alias="Home Assistant"
  device_class="Lighting_controller" minimum_component_engine_version="0" rpm_xml_version="3.813">

  <notes>
    Version 3.8: Adding Button entity.
    Version 3.7: Updated script loader to allow specifying script path, server url, and force updating on load.
    Version 3.6: Fixed another typo in lib loading.
    Version 3.5: Fixed typo in lib loading.
    Version 3.4: Added better support for locks and shades
    Version 3.1: Entity subscriptions only and based on actual data table entries. Still allows filtering by state name. brightness,state,cover,attributes etc.
    Version 3.0: Removed installation script. SSH to host and run bash &lt;(curl -Ls "https://github.com/benumc/rubi/raw/main/rubi.sh") instead. Also change the address on the wire to 127.0.0.1
    Version 2.8: Fixed switch control domain from light to switch
    Version 2.7: Complete feedback re-write. Now uses a comma separated list to ignore or include keys for feedback based on a state variable. "all" followed by any other keys will allow all keys except any specified after all. Otherwise will ignore all keys except those in the list. Default is "brightness,state"
    Version 2.6: Adjusted feedback scaling to 0-255
    Version 2.5: More data filtering and added support for service call handling. Removed tracking for grouped entites as these should receive their own updates.
    Version 2.4: Further reduced incoming data and added initial state gathering. Limited group support. Still need to support more entity types
    Version 2.3: Status Feedback Overhaul to filter down closer to useful information. Still needs quite a bit of work.
    Version 2.2: Limited parsing for incoming data and required userzone needed in state variables section.
    Version 2.1: Fix protocol error in websocket handshake
    
    ToDo. Add support for all savant supported entities.
      Dimmer(working), Switch(Working), Button(generic states only as call service), Thermostat(generic states only), fans(generic states only), garage door, door lock etc.
    
    Setup
    Must set address on the wire to 127.0.0.1
    Hass (ip address or hostname) and token need to be set in the state variables section
    Host must have rubi installed
    bash &lt;(curl -Ls "https://github.com/benumc/rubi/raw/main/rubi.sh")
    
    Keep in mind that this is written with only a virtual home assistant system and feedback from those that try it. 
    Improvements can only be made when issues are well described and preferably include output from rpmterminal when possible.
    
    If you run into problems getting the profile to connect, try the following:
    1) Double check that your long lived access token and hass (ip address or hostname) are set correctly in the state variables section. If using hostname then make sure that the savant host is on the same subnet as the hass serever and it can communicate with the hass server using its hostname.
    2) Make sure that the IP Address on the wire in blueprint is set to 127.0.0.1
    
  </notes>  
  <control_interfaces preferred="ip">
    <ip port="25809" response_time_length_ms="1000" protocol="tcp">
        <send_postfix type="hex">0A</send_postfix>
        <receive_end_condition test_condition="data" type="hex">0A</receive_end_condition>
    </ip>
  </control_interfaces>
  <media_interfaces>
    <data name_on_component="Ethernet">
      <combined_media>
        <data_media type="ethernet"/>
        <control port="25809"/>
      </combined_media>
    </data>


    <internal name_on_component="Lighting Controller">
      <environmental_media/>
      <resource resource_type="ENV_LIGHTINGCONTROLLER_SOURCE"/>
      <resource resource_type="ENV_FANCONTROLLER_SOURCE"/>
      <resource resource_type="ENV_DOOR_LOCK_SOURCE"/>
      <resource resource_type="ENV_GARAGE_DOOR_SOURCE"/>
      <resource resource_type="ENV_SHADECONTROLLER_SOURCE" />
    </internal>
  </media_interfaces>
  <state_variable_list>
    <state_variable name="local_script_path" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes">#{Dir.home('RPM')}/home_assistant/</state_variable>
    <state_variable name="required_libs" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes">hass_ws.rb select_controller.rb non_blocking_ws_client.rb app_logger.rb</state_variable>
    <state_variable name="force_script_update_on_load" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes">NO</state_variable>
    <state_variable name="lib_server_url" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes">https://raw.githubusercontent.com/benumc/rubi/main/</state_variable>
    <state_variable name="subscribe_all_events" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes">NO</state_variable>

    <state_variable name="auth_token" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Long Lived User Access Token"/>
    <state_variable name="server_address" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Hass Server Address">homeassistant.local</state_variable>
    <state_variable name="server_port" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Hass Server API Port">8123</state_variable>
    <state_variable name="state_filter" owning_logical_component="Home Assistant"  state_center_type="string" state_center_binding="state_filter" user_editable="yes">brightness,state,cover,lock,current_position</state_variable>
    <state_variable name="HassEntityArray" owning_logical_component="Home Assistant" state_center_type="string" state_center_binding="HassEntityArray"></state_variable>

    <state_variable name="FanSet_0" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Fan Speed Off">0</state_variable>
    <state_variable name="FanSet_1" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Fan Speed Low">2</state_variable>
    <state_variable name="FanSet_2" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Fan Speed Mid">4</state_variable>
    <state_variable name="FanSet_3" owning_logical_component="Home Assistant" state_center_type="string" user_editable="yes" note="Fan Speed High">7</state_variable>


  </state_variable_list>
  <logical_component logical_component_name="Home Assistant">
    <implementation>
      <internal name_on_component="Lighting Controller"/>
    </implementation>

    <status_messages>
      <status_message name="ShadeLevel">
        <data type="character" terminator="_current_position===" terminator_type="character">
          <update state="EntityID" type="string" />
        </data>
        <data type="character" terminator_type="end_of_data">
          <update state="ShadeLevel" type="integer" />
        </data>
        <append_data_to_state_names state="EntityID" />
      </status_message>

      <status_message name="Brightness">
        <data type="character" terminator="_brightness===" terminator_type="character">
          <update state="EntityID" type="string" />
        </data>
        <data type="character" terminator_type="end_of_data">
          <update state="Value" type="integer" />
          <data_map match_required="no">
            <convert>
              <multiply>100</multiply>
              <divide>255</divide>
              <update state="DimmerLevel" type="integer"></update>
            </convert>
          </data_map>
        </data>
        <append_data_to_state_names state="EntityID" />
      </status_message>

      <status_message name="State">
        <data type="character" terminator="_state===" terminator_type="character">
          <update state="EntityID" type="string" />
        </data>
        <data type="character" terminator_type="end_of_data">
          <update state="CurrentState" type="string"/>
          <data_map match_required="no">
            <map key="closed">
              <update state="IsShadeOpen" type="boolean">false</update>
            </map>
            <map key="open">
              <update state="IsShadeOpen" type="boolean">true</update>
            </map>
            <map key="locked">
              <update state="DoorLockStatus" type="string">Locked</update>
            </map>
            <map key="unlocked">
              <update state="DoorLockStatus" type="string">Unlocked</update>
            </map>
            <map key="on">
              <update state="IsDimmerOn" type="boolean">true</update>
              <update state="LightPowerStatus" type="string">ON</update>
              <update state="IsLightOn" type="boolean">true</update>
              <update state="GarageDoorStatus" type="string">Open</update>
              <update state="IsLedOn" type="boolean">true</update>
            </map>
            <map key="off">
              <update state="IsDimmerOn" type="boolean">false</update>
              <update state="LightPowerStatus" type="string">OFF</update>
              <update state="IsLightOn" type="boolean">false</update>
              <update state="GarageDoorStatus" type="string">Closed</update>
              <update state="DimmerLevel" type="integer">0</update>
              <update state="IsLedOn" type="boolean">false</update>
            </map>
          </data_map>
        </data>
        <append_data_to_state_names state="EntityID" />
      </status_message>

      <status_message name="Attributes">
        <data type="character" terminator="_attributes===" terminator_type="character">
          <update state="EntityID" type="string" />
        </data>
        <data type="character" terminator_type="end_of_data">
          <update state="CurrentAttributes" type="string"/>
        </data>
        <append_data_to_state_names state="EntityID" />
      </status_message>
      <status_message name="OtherUpdate">
        <data type="character" terminator="===" terminator_type="character">
          <update state="EntityID" type="string" />
        </data>
        <data type="character" terminator_type="end_of_data">
          <update state="Value" type="string" />
        </data>
        <append_data_to_state_names state="EntityID" />
      </status_message>

      <status_message name="Service">
        <constant type="character">type:</constant>
        <data type="character" terminator="," terminator_type="character">
          <update state="Type" type="string" />
        </data>
        <constant type="character">entity:</constant>
        <data type="character" terminator="," terminator_type="character">
          <update state="EntityID" type="string" />
        </data>
        <constant type="character">service:</constant>
        <data type="character" terminator="," terminator_type="character">
          <update state="ServiceState" type="string"/>
        </data>
        <constant type="character">domain:</constant>
        <data type="character" terminator="," terminator_type="end_of_data">
          <update state="FriendlyName" type="string"/>
        </data>
        <append_data_to_state_names state="EntityID" />
      </status_message>

      <status_message name="Unhandled">
        <data type="character" terminator_type="end_of_data">
          <update state="Unhandled" type="string"></update>
        </data>
      </status_message>
    </status_messages>

    <resource_component_actions resource_type="ENV_FANCONTROLLER_SOURCE">
      <action name="FanSet">
        <action_argument name="Address1" note="Entity ID"/>
        <action_argument name="Address2" note="not used"/>
        <action_argument name="Address3" note="not used"/>
        <action_argument name="Address4" note="not used"/>
        <action_argument name="Address5" note="not used"/>
        <action_argument name="Address6" note="not used"/>
        <action_argument name="FanSpeed" note="Fan Speed 0 - 3"/>
        <command_interface interface="ip">
          <!-- Can sequence multiple commands, maybe to turn it off when FanSpeed is 0? -->
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">fan_set,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
              <parameter parameter_data_type="character">,</parameter>
              <parameter parameter_data_type="character" state_variable="FanSet_*" wildcard_source="action_argument" wildcard_source_name="FanSpeed"/>
            </parameter_list>
            <delay ms_delay="500"/>
          </command>
        </command_interface>
      </action>

      <entity name="Fan" address_components="2">
        <slider_representation>
          <press_action name="FanSet"/>
          <valueSource name="DimmerLevel">
            <unique_identifier name="Needed" address_component="2"/>
            <unique_identifier name="DeviceID" address_component="1"/>
          </valueSource>
        </slider_representation>
        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>
      </entity>
    </resource_component_actions>

    <resource_component_actions resource_type="ENV_LIGHTINGCONTROLLER_SOURCE">
      <action name="SwitchOn">
        <action_argument name="Address1" note="Entity ID"/>
        <action_argument name="Address2" note="Savant ID"/>
        <action_argument name="Address3" note=""/>
        <action_argument name="Address4" note=""/>
        <action_argument name="Address5" note=""/>
        <action_argument name="Address6" note=""/>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">switch_on,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
            </parameter_list>
            <delay ms_delay="10"/>
          </command>
        </command_interface>
      </action>

      <action name="SwitchOff">
        <action_argument name="Address1" note="Entity ID"/>
        <action_argument name="Address2" note="Savant ID"/>
        <action_argument name="Address3" note=""/>
        <action_argument name="Address4" note=""/>
        <action_argument name="Address5" note=""/>
        <action_argument name="Address6" note=""/>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">switch_off,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
            </parameter_list>
            <delay ms_delay="10"/>
          </command>
        </command_interface>
      </action>

      <action name="DimmerSet">
        <action_argument name="Address1" note="Entity ID"/>
        <action_argument name="Address2" note="not used"/>
        <action_argument name="Address3" note="not used"/>
        <action_argument name="Address4" note="not used"/>
        <action_argument name="Address5" note="not used"/>
        <action_argument name="Address6" note="not used"/>
        <action_argument name="DimmerLevel" note="Select the Dimmer Level 0 - 100"/>
        <action_argument name="DelayTime" note="not used"/>
        <action_argument name="FadeTime" note="not used"/>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">dimmer_set,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
              <parameter parameter_data_type="character">,</parameter>
              <parameter parameter_data_type="character" action_argument="DimmerLevel"/>
            </parameter_list>
            <delay ms_delay="10"/>
          </command>
        </command_interface>
      </action>

      <action name="ButtonPress">
        <action_argument name="Address1" note="Entity ID"/>
        <action_argument name="Address2" note="LED ID"/>
        <action_argument name="Address3" note="not used"/>
        <action_argument name="Address4" note="not used"/>
        <action_argument name="Address5" note="not used"/>
        <action_argument name="Address6" note="not used"/>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">button_press,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
            </parameter_list>
            <delay ms_delay="10"/>
          </command>
        </command_interface>
      </action>
      <action name="ButtonPressAndRelease">
        <action_argument name="Address1" note="Entity ID"/>
        <action_argument name="Address2" note="LED ID"/>
        <action_argument name="Address3" note="not used"/>
        <action_argument name="Address4" note="not used"/>
        <action_argument name="Address5" note="not used"/>
        <action_argument name="Address6" note="not used"/>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">button_press,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
            </parameter_list>
            <delay ms_delay="10"/>
          </command>
        </command_interface>
      </action>

      <entity name="Dimmer Group" address_components="1">
        <slider_representation>
          <press_action name="DimmerSet"/>
          <valueSource name="DimmerLevel">
            <unique_identifier address_component="1" name="Address1" format="%s"/>
          </valueSource>
        </slider_representation>
        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>
      </entity>

      <entity name="Switch" address_components="1">
        <toggle_button_representation>
          <release_action name="SwitchOn"> </release_action>
          <toggle_release_action name="SwitchOff"> </toggle_release_action>
          <osd_press_action name="SwitchOn"> </osd_press_action>
          <osd_hold_action name="SwitchOff"> </osd_hold_action>
          <toggleOnUsingState name="IsLightOn">
            <unique_identifier name="Address1" address_component="1" format="%s"/>
          </toggleOnUsingState>
        </toggle_button_representation>
        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>
      </entity>

      <entity name="Keypad Button" address_components="2">
        <toggle_button_representation>
            <press_action name="ButtonPress"></press_action>
            <!-- <release_action name="ButtonRelease"></release_action> -->
            <toggle_action name="ButtonPress"></toggle_action>
            <toggle_release_action name="ButtonRelease"></toggle_release_action>
            <osd_press_action name="ButtonPressAndRelease"></osd_press_action>
            <osd_hold_action name="ButtonPressAndRelease"></osd_hold_action>
            <toggleOnUsingState name="IsLedOn">
                <unique_identifier name="Address2" address_component="2" format="%s"/>
            </toggleOnUsingState>
        </toggle_button_representation>

        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>

        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="2" format="%s" />
        </query_status_with_action>

    </entity>
    </resource_component_actions>
    
    <resource_component_actions resource_type="ENV_SHADECONTROLLER_SOURCE">

      <action name="ShadeSet">
        <action_argument name="Address1" />
        <action_argument name="Address2" />
        <action_argument name="Address3" />
        <action_argument name="Address4" />
        <action_argument name="Address5" />
        <action_argument name="Address6" />
        <action_argument name="ShadeLevel" />
        <action_argument name="FadeTime" />
        <action_argument name="DelayTime" />
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">shade_set,</parameter>
              <parameter parameter_data_type="character" action_argument="Address1"/>
              <parameter parameter_data_type="character">,</parameter>
              <parameter parameter_data_type="character" action_argument="ShadeLevel" />
            </parameter_list>
            <delay ms_delay="10"></delay>
          </command>
        </command_interface>
      </action>

      <entity name="Single Motor Variable Shade" address_components="1">
        <slider_representation>
          <release_action name="ShadeSet" />
          <valueSource name="ShadeLevel">
            <unique_identifier name="href" address_component="1" format="%s" />
          </valueSource>
        </slider_representation>
        <group_representation>
          <push_button_representation>
            <release_action name="ShadeSet">
              <argument name="ShadeLevel" value="0" />
            </release_action>
            <osd_press_action name="ShadeSet">
              <argument name="ShadeLevel" value="0" />
            </osd_press_action>
          </push_button_representation>
          <push_button_representation>
            <release_action name="ShadeSet">
              <argument name="ShadeLevel" value="20" />
            </release_action>
            <osd_press_action name="ShadeSet">
              <argument name="ShadeLevel" value="20" />
            </osd_press_action>
          </push_button_representation>
          <push_button_representation>
            <release_action name="ShadeSet">
              <argument name="ShadeLevel" value="40" />
            </release_action>
            <osd_press_action name="ShadeSet">
              <argument name="ShadeLevel" value="40" />
            </osd_press_action>
          </push_button_representation>
          <push_button_representation>
            <release_action name="ShadeSet">
              <argument name="ShadeLevel" value="60" />
            </release_action>
            <osd_press_action name="ShadeSet">
              <argument name="ShadeLevel" value="60" />
            </osd_press_action>
          </push_button_representation>
          <push_button_representation>
            <release_action name="ShadeSet">
              <argument name="ShadeLevel" value="80" />
            </release_action>
            <osd_press_action name="ShadeSet">
              <argument name="ShadeLevel" value="80" />
            </osd_press_action>
          </push_button_representation>
          <push_button_representation>
            <release_action name="ShadeSet">
              <argument name="ShadeLevel" value="100" />
            </release_action>
            <osd_press_action name="ShadeSet">
              <argument name="ShadeLevel" value="100" />
            </osd_press_action>
          </push_button_representation>
        </group_representation>
        <toggle_button_representation>
          <press_action name="ShadeSet">
            <argument name="ShadeLevel" value="100" />
          </press_action>
          <toggle_action name="ShadeSet">
            <argument name="ShadeLevel" value="0" />
          </toggle_action>
          <osd_press_action name="ShadeSet">
            <argument name="ShadeLevel" value="100" />
          </osd_press_action>
          <osd_hold_action name="ShadeSet">
            <argument name="ShadeLevel" value="0" />
          </osd_hold_action>
          <toggleOnUsingState name="IsShadeOpen">
            <unique_identifier name="href" address_component="1" format="%s" />
          </toggleOnUsingState>
        </toggle_button_representation>
        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>
      </entity>

    </resource_component_actions>

    <resource_component_actions resource_type="ENV_DOOR_LOCK_SOURCE">
      <action name="LockDoorLock">
        <action_argument name="DoorLockAddress" note="Entity ID"/>
        <update_state_variable name="DoorLockStatus_*" update_type="set" update_source="constant" wildcard_format="%s" wildcard_source="action_argument" wildcard_source_name="DoorLockAddress">Locked</update_state_variable>
        <update_state_variable name="IsDoorLocked_*" update_type="set" update_source="constant" wildcard_format="%s" wildcard_source="action_argument" wildcard_source_name="DoorLockAddress">true</update_state_variable>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">lock_lock,</parameter>
              <parameter parameter_data_type="character" action_argument="DoorLockAddress"/>
            </parameter_list>
            <delay ms_delay="500"/>
          </command>
        </command_interface>
      </action>

      <action name="UnlockDoorLock">
        <action_argument name="DoorLockAddress" note="Entity ID"/>
        <update_state_variable name="DoorLockStatus_*" update_type="set" update_source="constant" wildcard_format="%s" wildcard_source="action_argument" wildcard_source_name="DoorLockAddress">Unlocked</update_state_variable>
        <update_state_variable name="IsDoorLocked_*" update_type="set" update_source="constant" wildcard_format="%s" wildcard_source="action_argument" wildcard_source_name="DoorLockAddress">false</update_state_variable>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">unlock_lock,</parameter>
              <parameter parameter_data_type="character" action_argument="DoorLockAddress"/>
            </parameter_list>
            <delay ms_delay="500"/>
          </command>
        </command_interface>
      </action>

      <entity name="Lock" address_components="2">
        <toggle_button_representation>
          <release_action name="UnlockDoorLock"/>
          <toggle_release_action name="LockDoorLock"/>
        </toggle_button_representation>
        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>
      </entity>
    </resource_component_actions>

    <resource_component_actions resource_type="ENV_GARAGE_DOOR_SOURCE">
      <action name="CloseGarageDoor">
        <action_argument name="GarageDoorAddress" note="Entity ID"/>
        <update_state_variable name="GarageDoorStatus_*" update_type="set" update_source="constant" wildcard_format="%s" wildcard_source="action_argument" wildcard_source_name="GarageDoorAddress">Closed</update_state_variable>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">close_garage_door,</parameter>
              <parameter parameter_data_type="character" action_argument="GarageDoorAddress"/>
            </parameter_list>
          </command>
        </command_interface>
      </action>

      <action name="OpenGarageDoor">
        <action_argument name="GarageDoorAddress" note="Entity ID"/>
        <update_state_variable name="GarageDoorStatus_*" update_type="set" update_source="constant" wildcard_format="%s" wildcard_source="action_argument" wildcard_source_name="GarageDoorAddress">Open</update_state_variable>
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">open_garage_door,</parameter>
              <parameter parameter_data_type="character" action_argument="GarageDoorAddress"/>
            </parameter_list>
          </command>
        </command_interface>
      </action>

      <entity name="Garage Door" address_components="1">
        <toggle_button_representation>
          <release_action name="OpenGarageDoor"/>
          <toggle_release_action name="CloseGarageDoor"/>
        </toggle_button_representation>
        <query_status_with_action name="TrackEntity" period_ms="0">
          <with_arg name="Address1" address_component="1" format="%s" />
        </query_status_with_action>
      </entity>
    </resource_component_actions>

    <custom_component_actions>
      <action name="TrackEntity">
        <action_argument name="Address1" />
        <update_state_variable name="HassEntityArray" update_type="append" update_source="action_argument">Address1</update_state_variable>
        <update_state_variable name="HassEntityArray" update_type="append" update_source="constant">,</update_state_variable>
      </action>
      <!-- <action name="TrackEntityLED">
        <action_argument name="Address1" />
        <update_state_variable name="HassEntityArray" update_type="append" update_source="constant">switch.</update_state_variable>
        <update_state_variable name="HassEntityArray" update_type="append" update_source="action_argument">Address1</update_state_variable>
        <update_state_variable name="HassEntityArray" update_type="append" update_source="constant">_led,</update_state_variable>
      </action>
    -->
      <action name="SubscribeEntities">
        <command_interface interface="ip">
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">subscribe_entity,</parameter>
              <parameter parameter_data_type="character" state_variable="HassEntityArray"></parameter>
            </parameter_list>
            <delay ms_delay="50"/>
          </command>
        </command_interface>
      </action>
      <action name="AwaitConnection">
        <update_state_variable name="HassEntityArray" update_type="set" update_source="constant"></update_state_variable>
        <execute_on_schedule period_ms="0"/>
        <execute_action_after_delay ms_delay="10000" action_name="Start" action_type="CUSTOM"></execute_action_after_delay>
      </action>
      <action name="Start">
        <command_interface interface="ip">
          <command response_required="no">
            <command_string type="character"/>
            <parameter_list>
              <parameter parameter_data_type="character">HASS_SUBSCRIBE_ALL_EVENTS = ('</parameter>
              <parameter parameter_data_type="character" state_variable="subscribe_all_events" />
              <parameter parameter_data_type="character">' != 'NO');</parameter>

              <parameter parameter_data_type="character">HASS_DIRECTORY_PATH = "</parameter>
              <parameter parameter_data_type="character" state_variable="local_script_path" />
              <parameter parameter_data_type="character">";</parameter>

              <parameter parameter_data_type="character">HASS_FORCE_UPDATE = ('</parameter>
              <parameter parameter_data_type="character" state_variable="force_script_update_on_load" />
              <parameter parameter_data_type="character">' != 'NO');</parameter>
              
              <parameter parameter_data_type="character">HASS_LIBRARY_URL = '</parameter>
              <parameter parameter_data_type="character" state_variable="lib_server_url" />
              <parameter parameter_data_type="character">';</parameter>

              <parameter parameter_data_type="character">HASS_REQUIRED_FILES = %w[</parameter>
              <parameter parameter_data_type="character" state_variable="required_libs" />
              <parameter parameter_data_type="character">];</parameter>
              <parameter parameter_data_type="character"><![CDATA[


def download_files(file_names)
  file_names.each do |file_name|
    file_path = "#{HASS_DIRECTORY_PATH}#{file_name}"

    p([:downloading_file?, file_name, HASS_FORCE_UPDATE && File.exists?(file_path)])
    next if File.exists?(file_path) && !HASS_FORCE_UPDATE

    `curl -s -o '#{file_path}' '#{HASS_LIBRARY_URL}#{file_name}'`
  end
end

Dir.mkdir(HASS_DIRECTORY_PATH) unless Dir.exist?(HASS_DIRECTORY_PATH)
download_files(HASS_REQUIRED_FILES)
p("Loading: #{HASS_DIRECTORY_PATH}hass_ws.rb")
load "#{HASS_DIRECTORY_PATH}hass_ws.rb"

                ]]>

              </parameter>
            </parameter_list>
          </command>
          <command response_required="no">
            <parameter_list>
              <parameter parameter_data_type="character">Hass.new('</parameter>
              <parameter parameter_data_type="character" state_variable="server_address"/>
              <parameter parameter_data_type="character">:</parameter>
              <parameter parameter_data_type="character" state_variable="server_port"/>
              <parameter parameter_data_type="character">','</parameter>
              <parameter parameter_data_type="character" state_variable="auth_token"/>
              <parameter parameter_data_type="character">','</parameter>
              <parameter parameter_data_type="character" state_variable="state_filter"/>
              <parameter parameter_data_type="character">'.split(','))</parameter>
            </parameter_list>
          </command>
          <command>
            <parameter_list>
              <parameter parameter_data_type="character">SelectController.instance.run</parameter>
            </parameter_list>
          </command>
        </command_interface>
        <execute_action_after_delay ms_delay="5000" action_name="SubscribeEntities" action_type="CUSTOM"></execute_action_after_delay>
      </action>
    </custom_component_actions>
  </logical_component>

</component>
